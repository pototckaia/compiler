<program> ::= <main block> 

<main block> ::= 
				<main block declaration>
				<compound statement> 
                "."

    <declaration part> ::= 
	                    { (<constant definition part> | <type definition part> | <variable declaration part> ) }

	<main block declaration> ::=  (<declaration part> | <procedure and function declaration part>

______________________________________

<type definition part> ::= "type" <type definition> ";" { <type definition> ";" }

	<type definition> ::= <identifier> "=" <type>
______________________________________

<constant definition part> ::= "const" <constant definition> ";" { <constant definition>  ";" }

	<constant definition> ::= <identifier> "=" <expression>
______________________________________

<variable declaration part> ::= "var" <variable declaration> ";" { <variable declaration>  ";" }

	<variable declaration> ::= <identifier list> ":" <type> | 
								<identifier> ":" <type> "=" <expression>
______________________________________

<procedure and function declaration part> ::= { (<procedure declaration> | <function declaration>) ";" }
______________________________________

<procedure declaration> ::= <procedure heading> ";" <subroutine block>

	<procedure heading> ::= "procedure" <identifier> [ <formal parameter list> ]
	
	<block> ::= <declaration part> 
				<compound statement>

	<subroutine block> ::= <block> | "forward" 
______________________________________

<function declaration> ::= <function heading> ";" <subroutine block>

	<function heading> ::= "function" <identifier> [ <formal parameter list> ] ":" <type>
______________________________________
<formal parameter list> ::= "(" [ <formal parameter section> {";" <formal parameter section> } ] ")"

<formal parameter section> ::= [ <specification> ] <value parameter>
	<value parameter> ::= <identifier list> ":" <type>
	<specification> ::= "var" | "const" | "out"
______________________________________

<identifier list> ::= <identifier> {"," <identifier> } 

<expression> ::= <simple expression> | <simple expression> <relational operator> <simple expression>
	<relational operator> ::= = | "<>" | "<" | "<=" | ">=" | ">" | "=" | "=="

	<simple expression> ::= <term> | <simple expression> <adding operator> <term>
		<adding operator> ::= "+" | "-" | "or" | "xor"

		<term> ::= <simple term> | <term> <multiplying operator> <simple term>
		<multiplying operator> ::= "*" | "/" | "div" | "mod" | "and" | "shr" | "shr" 

			<simple term> ::= <factor> | <unary operator> <simple term>
			<unary operator> ::= "not" | "@" | sign
								
				<factor> ::= <identifier> | <unsigned number> | "(" <expression> ")" |  "Nil"
							<function call> | <record access> | <array access>

							<function call> ::= <factor> [ "(" <expression> {"," <expression>} ")" ]

							<array access> ::= <factor> "[" <expression> {","<expression>} "]"

							<record access> ::= <factor> "." <identifier>

______________________________________

<type> ::= <simple type> | <array type> | <record type> | <pointer type> | <procedure type>

	<simple type> ::= <identifier>

	<array type> ::= "array" "[" <index ranges> "]" "of" <type>

		<index ranges> ::= <index range> {"," <index range>}

			<index range> ::= <integer> ".." <integer>

	<record type> ::= "record" [ <field list> ] "end"

		<field list> ::= <field section> {";" <field section> }

			<field section> ::=  <identifier list> ":" <type>

				<identifier list> := <identifier> {"," <identifier>}

	<pointer type> ::= "^" <type>

	<procedure type> ::= <function signature> | <procedure signature>

		<function signature> ::= "function" [ <formal parameter list> ] ":" <type>
		<procedure signature> ::= "procedure" [ <formal parameter list> ]
______________________________________

<statement part> ::= [<statement> {";" <statement>}]

<statement> ::= <simple statement> | <structured statement>

	<simple statement> ::= <assignment statement> | <function call>

		<assignment statement> ::= <expression> <assignment symbol> <expression>
			<assignment symbol> ::= ":=" | "+=" | "-=" | "*=" | "/="

	<structured statement> ::= <compound statement> | 
							<if statement> | 
							<while statement> | 
							<repeat statemant> | 
							<for statement>

		<compound statement> ::= "begin" <statement part> "end"

		<if statement> ::= "if" <expression> "then" <statement> [ "else" <statement> ]

		<while statement> ::= "while" <expression> "do" <statement>

		<repeat statement> ::= "repeat" <statement part> "until" <expression>

		<for statement> ::= "for" <identifier> ":=" <for bounds> "do" <statement>

			<for bounds> ::= <expression> ("to" | "downto") <expression>
